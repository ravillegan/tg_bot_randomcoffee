from operator import length_hint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
import motor.motor_asyncio
from datetime import datetime, timedelta
import random
from random import randint
import asyncio
import aioschedule
from aiogram.utils.exceptions import BotBlocked


#TOKEN = os.getenv('BOT_TOKEN')
TOKEN = "5442350518:AAECjitffl2ZMbwCf5UhOJwg7S2mFkzH8fk"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

cluster = motor.motor_asyncio.AsyncIOMotorClient("mongodb+srv://raville_ganiev:07089910Rgu@cluster0.5giudi4.mongodb.net/?retryWrites=true&w=majority", tls=True, tlsAllowInvalidCertificates=True)
users_collection = cluster.randomcoffee.users
week_collection = cluster.randomcoffee.week
start_collection = cluster.randomcoffee.start_users
week_pairs_collection = cluster.randomcoffee.week_pairs
freetext_collection = cluster.randomcoffee.freetext

async def user_info(user_info_json):
    if hasattr(user_info_json, 'username') and user_info_json.username is not None:
        user_id = user_info_json.username
    elif hasattr(user_info_json, 'first_name') and hasattr(user_info_json, 'last_name') and user_info_json.first_name is not None and user_info_json.last_name is not None:
        user_id = ' '+user_info_json.first_name + ' ' + user_info_json.last_name
    elif hasattr(user_info_json, 'last_name') and user_info_json.last_name is not None:
        user_id = ' '+user_info_json.last_name
    elif hasattr(user_info_json, 'first_name') and user_info_json.first_name is not None:
        user_id = ' '+user_info_json.first_name
    else:
        user_id =' –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ' +user_info_json.from_user.id
    return user_id

async def get_user_name(user_id):
    user_name_json = await week_collection.find_one({'user_id': str(user_id)})
    user_name = user_name_json['user_name']
    return user_name

async def add_user(user_id, user_name, community):
    if await users_collection.count_documents({'user_id': {'$eq': str(user_id)}}) != 0:
        return 'already'
    await users_collection.insert_one({'user_id': str(user_id), 'user_name' : user_name, 'first_community' : community})
    return 'new'

async def add_start(user_id, user_name):
    if await start_collection.count_documents({'user_id': {'$eq': str(user_id)}}) != 0:
        return 'already'
    await start_collection.insert_one({'user_id': str(user_id), 'user_name' : user_name})
    return 'new'

# async def update_user(user_id, user_name, city, community):
#     await users_collection.update_one({'user_id': str(user_id)}, {'$set': {'user_name': str(user_name), 'city': str(city), 'community': str(community)}})

async def want_to_coffee(user_id, user_name, community, week):
    await add_user(user_id, user_name, community)
    print(week)
    # if await week_collection.count_documents({'user_id': {'$eq': str(user_id)}, 'community': {'$eq': str(community)}, 'week': {'$eq': str(week)}}) != 0:
    if await week_collection.count_documents({'user_id': {'$eq': str(user_id)}, 'week': {'$eq': str(week)}}) != 0:
        return 'already'
    await week_collection.insert_one({'user_id': str(user_id), 'user_name' : user_name, 'community': str(community), 'week': str(week)})
    return 'new'

async def shuffle_week_pairs():
    coms = []
    today = datetime.now().date()
    async for docs in week_collection.find({'week':str(today)}):
        if docs['community'] not in coms:
            coms.append(docs['community'])
    number_of_coms = len(coms)
    pairs = [[] for i in range(number_of_coms)]
    i = 0
    for com in coms:
        async for docs in week_collection.find({'community': str(com), 'week':str(today)}):
            pairs[i].append(docs['user_id'])
        i += 1
    for i in range(number_of_coms):
        random.shuffle(pairs[i])
    return(pairs, coms)

async def create_week_pairs():
    pairs, coms = await shuffle_week_pairs()
    com_num = 0
    # now = datetime.now()
    # next_monday = (now - timedelta(days = now.weekday()) + timedelta(days=7)).date()
    today = datetime.now()
    next_friday = (today + timedelta( (4-today.weekday()) % 7 )).date()
    for com in pairs:
        if len(com) == 1:
            await bot.send_message(chat_id = int(com[0]), text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –Ω–∏–∫—Ç–æ, –∫—Ä–æ–º–µ —Ç–µ–±—è, –Ω–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
            await bot.send_message(chat_id = int(com[0]), text = "–ü–æ–º–æ–≥–∏ –º–Ω–µ, –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –≤ –±–µ—Å–µ–¥—É, –≤–µ–¥—å –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª—Å—è ü•∫")
            try:
                await week_pairs_collection.insert_one({'user_id_1': str(com[0]), 'user_name_1' : await get_user_name(int(com[0])), 'community': str(coms[com_num]), 'week': str(next_friday)})
            except BotBlocked:
                await asyncio.sleep(1)
            com_num += 1
            continue
        if len(com) % 2 == 0:
            j = 0
            while j < len(com):
                username_1 = await get_user_name(int(com[j]))
                username_2 = await get_user_name(int(com[j+1]))
                # username_1 = username_1.replace('_','\_')
                # username_2 = username_2.replace('_','\_')
                try:
#                    await bot.send_message(chat_id = int(com[j]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    if username_2[0] == ' ':
                        await bot.send_message(chat_id = int(com[j]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_2+'\ntg://user?id='+str(int(com[j+1])))
                    else:
                        await bot.send_message(chat_id = int(com[j]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_2+'\ntg://user?id='+str(int(com[j+1])))
                    await bot.send_message(chat_id = int(com[j]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
                    # print(username_2, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j+1]))+')')
                    # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j+1]))+')', parse_mode='MarkdownV2')
                except BotBlocked:
                    await asyncio.sleep(1)
                try:
#                    await bot.send_message(chat_id = int(com[j+1]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    if username_1[0] == ' ':
                        await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_1+'\ntg://user?id='+str(int(com[j])))
                    else:
                        await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_1+'\ntg://user?id='+str(int(com[j])))
                    # await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')', parse_mode='MarkdownV2')
                    await bot.send_message(chat_id = int(com[j+1]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏. –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
                    # print(username_1, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')')
                    # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')', parse_mode='MarkdownV2')
                except BotBlocked:
                    await asyncio.sleep(1)
                await week_pairs_collection.insert_one({'user_id_1': str(com[j]), 'user_name_1' : username_1,'user_id_2': str(com[j+1]), 'user_name_2' : username_2, 'community': str(coms[com_num]), 'week': str(next_friday)})
                print(j, coms[com_num])
                j += 2
        else:
            j = 0
            while j < len(com) - 3:
                username_1 = await get_user_name(int(com[j]))
                username_2 = await get_user_name(int(com[j+1]))
                # username_1 = username_1.replace('_','\_')
                # username_2 = username_2.replace('_','\_')
                try:
#                    await bot.send_message(chat_id = int(com[j]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    if username_2[0] == ' ':
                        await bot.send_message(chat_id = int(com[j]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_2+'\ntg://user?id='+str(int(com[j+1])))
                    else:
                        await bot.send_message(chat_id = int(com[j]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_2+'\ntg://user?id='+str(int(com[j+1])))
                    # await bot.send_message(chat_id = int(com[j]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j+1]))+')', parse_mode='MarkdownV2')
                    await bot.send_message(chat_id = int(com[j]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
                    # print(username_2, "suka –ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j]))+')')
                    # await bot.send_message(chat_id = 463776237, text = "suka –ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j+1]))+')', parse_mode='MarkdownV2')
                except BotBlocked:
                    await asyncio.sleep(1)
                try:
#                    await bot.send_message(chat_id = int(com[j+1]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    if username_1[0] == ' ':
                        await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_1+'\ntg://user?id='+str(int(com[j])))
                    else:
                        await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_1+'\ntg://user?id='+str(int(com[j])))
                    # await bot.send_message(chat_id = int(com[j+1]), text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')', parse_mode='MarkdownV2')
                    await bot.send_message(chat_id = int(com[j+1]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
                    # print(username_1, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')')
                    # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')', parse_mode='MarkdownV2')
                except BotBlocked:
                    await asyncio.sleep(1)
                await week_pairs_collection.insert_one({'user_id_1': str(com[j]), 'user_name_1' : username_1,'user_id_2': str(com[j+1]), 'user_name_2' : username_2, 'community': str(coms[com_num]), 'week': str(next_friday)})
                print(j, coms[com_num])
                j += 2
            username_1 = await get_user_name(int(com[-3]))
            username_2 = await get_user_name(int(com[-2]))
            username_3 = await get_user_name(int(com[-1]))
            # username_1 = username_1.replace('_','\_')
            # username_2 = username_2.replace('_','\_')
            # username_3 = username_3.replace('_','\_')

            try:
#                await bot.send_message(chat_id = int(com[-3]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                await bot.send_message(chat_id = int(com[-3]), text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—á–µ—Ç–Ω—ã–º")
                await bot.send_message(chat_id = int(com[-3]), text = "–ò —Ç–µ–±–µ –≤—ã–ø–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –¥–≤—É–º—è –ª—é–¥—å–º–∏")
                await bot.send_message(chat_id = int(com[-3]), text = "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Ç—Ä–æ–∏—Ö –∏–ª–∏ –º–æ–∂–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
                if username_2[0] == ' ':
                    await bot.send_message(chat_id = int(com[-3]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_2+'\ntg://user?id='+str(int(com[-2])))
                else:
                    await bot.send_message(chat_id = int(com[-3]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_2+'\ntg://user?id='+str(int(com[-2])))
                if username_3[0] == ' ':
                    await bot.send_message(chat_id = int(com[-3]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_3+'\ntg://user?id='+str(int(com[-1])))
                else:
                    await bot.send_message(chat_id = int(com[-3]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_3+'\ntg://user?id='+str(int(com[-1])))
                await bot.send_message(chat_id = int(com[-3]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
                # print(username_1, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[j]))+')')
                # print(username_2, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[j]))+')')
                # print(username_3, "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_3+'](tg://user?id='+str(int(com[j]))+')')
                # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[-3]))+')', parse_mode='MarkdownV2')
                # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_2+'](tg://user?id='+str(int(com[-2]))+')', parse_mode='MarkdownV2')
                # await bot.send_message(chat_id = 463776237, text = "–ê –≤–æ—Ç –∏ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_3+'](tg://user?id='+str(int(com[-1]))+')', parse_mode='MarkdownV2')
            except BotBlocked:
                    await asyncio.sleep(1)

            try:
#                await bot.send_message(chat_id = int(com[-2]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                await bot.send_message(chat_id = int(com[-2]), text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—á–µ—Ç–Ω—ã–º")
                await bot.send_message(chat_id = int(com[-2]), text = "–ò —Ç–µ–±–µ –≤—ã–ø–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –¥–≤—É–º—è –ª—é–¥—å–º–∏")
                await bot.send_message(chat_id = int(com[-2]), text = "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Ç—Ä–æ–∏—Ö –∏–ª–∏ –º–æ–∂–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
                if username_1[0] == ' ':
                    await bot.send_message(chat_id = int(com[-2]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_1+'\ntg://user?id='+str(int(com[-3])))
                else:
                    await bot.send_message(chat_id = int(com[-2]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_1+'\ntg://user?id='+str(int(com[-3])))
                if username_3[0] == ' ':
                    await bot.send_message(chat_id = int(com[-2]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_3+'\ntg://user?id='+str(int(com[-1])))
                else:
                    await bot.send_message(chat_id = int(com[-2]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_3+'\ntg://user?id='+str(int(com[-1])))
                # await bot.send_message(chat_id = int(com[-2]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_1+'](tg://user?id='+str(int(com[-3]))+')', parse_mode='MarkdownV2')
                # await bot.send_message(chat_id = int(com[-2]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ["+username_3+'](tg://user?id='+str(int(com[-1]))+')', parse_mode='MarkdownV2')
                await bot.send_message(chat_id = int(com[-2]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
            except BotBlocked:
                await asyncio.sleep(1)
            
            try:
#                await bot.send_message(chat_id = int(com[-1]), text = "–Ø —Å–ª–æ–º–∞–≤—Å—è, –Ω–æ —Ç–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é. –ï—Å–ª–∏ —è —Å–∫–∏–¥—ã–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É, —Ç–æ —ç—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                await bot.send_message(chat_id = int(com[-1]), text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—á–µ—Ç–Ω—ã–º")
                await bot.send_message(chat_id = int(com[-1]), text = "–ò —Ç–µ–±–µ –≤—ã–ø–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å –¥–≤—É–º—è –ª—é–¥—å–º–∏")
                await bot.send_message(chat_id = int(com[-1]), text = "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Ç—Ä–æ–∏—Ö –∏–ª–∏ –º–æ–∂–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
                if username_1[0] == ' ':
                    await bot.send_message(chat_id = int(com[-1]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_1+'\ntg://user?id='+str(int(com[-3])))
                else:
                    await bot.send_message(chat_id = int(com[-1]), text = "–ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_1+'\ntg://user?id='+str(int(com[-3])))
                if username_2[0] == ' ':
                    await bot.send_message(chat_id = int(com[-1]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"+username_2+'\ntg://user?id='+str(int(com[-2])))
                else:
                    await bot.send_message(chat_id = int(com[-1]), text = "–í—Ç–æ—Ä–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ @"+username_2+'\ntg://user?id='+str(int(com[-2])))
                await bot.send_message(chat_id = int(com[-1]), text = "–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ - —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥")
            except BotBlocked:
                await asyncio.sleep(1)

            await week_pairs_collection.insert_one({'user_id_1': str(com[-3]), 'user_name_1' : username_1,'user_id_2': str(com[-2]), 'user_name_2' : username_2, 'user_id_3': str(com[-1]), 'user_name_3' : username_3, 'community': str(coms[com_num]), 'week': str(next_friday)})
        com_num += 1

#screate_week_pairstart
@dp.message_handler(commands=['create_week_pairs'])
async def start(message: types.Message):
    await bot.send_message(message.chat.id, '—â–∞ –Ω–∞—Ö–∏–º–∏—á–∏–º')
    await create_week_pairs()
    await bot.send_message(message.chat.id, '–Ω–∞—Ö–∏–º–∏—á–µ–Ω–æ, —á–µ–∫–∞–π –ª–æ–≥–∏')

#start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    print('start', message.from_user.username if message.from_user.username is not None else message.from_user.id, datetime.now())
    user_name = await user_info(message.from_user)
    await add_start(message.from_user.id, user_name)
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Random Coffee')
    await bot.send_message(message.chat.id, '–ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, —Ç–æ —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é')
    await bot.send_message(message.chat.id, '–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É —è –±—É–¥—É —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ø–∞—Ä—ã –ª—é–¥–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ —ç—Ç–∏ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø–∏—Ç—å –≤–º–µ—Å—Ç–µ —á–∞–π/–∫–æ—Ñ–µ –∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å')
    await bot.send_message(message.chat.id, '–¢–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±–∑–∞–≤–µ—Å—Ç–∏—Å—å –∫—É—á–µ–π –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ soft skills')
    await bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, —Ç–æ –∂–º–∏ /reg_next_week, —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º—å—é–Ω–∏—Ç–∏')
    await bot.send_message(message.chat.id, '–ù—É –∞ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω–µ–π –∏–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∂–º–∏ \n/help')

inline_btn_1 = InlineKeyboardButton('–í–®–≠, 6 –æ–±—â–µ–∂–∏—Ç–∏–µ', callback_data='btn1')
inline_btn_2 = InlineKeyboardButton('–í–®–≠, 8 –æ–±—â–µ–∂–∏—Ç–∏–µ (–¢—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫)', callback_data='btn2')
inline_btn_3 = InlineKeyboardButton('–í–®–≠, –î—É–±–∫–∏', callback_data='btn3')
inline_btn_4 = InlineKeyboardButton('–í–®–≠, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', callback_data='btn4')
inline_btn_5 = InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ, –í–æ–¥–Ω—ã–π', callback_data='btn5')
inline_btn_6 = InlineKeyboardButton('–ú–ì–£', callback_data='btn6')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1).add(inline_btn_2).add(inline_btn_3).add(inline_btn_4).add(inline_btn_5).add(inline_btn_6)

inline_btn_1_del = InlineKeyboardButton('–í–®–≠, 6 –æ–±—â–µ–∂–∏—Ç–∏–µ', callback_data='del1')
inline_btn_2_del = InlineKeyboardButton('–í–®–≠, 8 –æ–±—â–µ–∂–∏—Ç–∏–µ (–¢—Ä–∏–ª–∏—Å—Ç–Ω–∏–∫)', callback_data='del2')
inline_btn_3_del = InlineKeyboardButton('–í–®–≠, –î—É–±–∫–∏', callback_data='del3')
inline_btn_4_del = InlineKeyboardButton('–í–®–≠, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', callback_data='del4')
inline_btn_5_del = InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ, –í–æ–¥–Ω—ã–π', callback_data='del5')
inline_btn_6_del = InlineKeyboardButton('–ú–ì–£', callback_data='del6')
inline_kb1_del = InlineKeyboardMarkup().add(inline_btn_1_del).add(inline_btn_2_del).add(inline_btn_3_del).add(inline_btn_4_del).add(inline_btn_5_del).add(inline_btn_6_del)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = int(''.join(filter(lambda i: i.isdigit(), callback_query.data)))
    # now = datetime.now()
    # next_monday = (now - timedelta(days = now.weekday()) + timedelta(days=7)).date()
    today = datetime.now()
    next_friday = (today + timedelta( (4-today.weekday()) % 7 )).date()
    print('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', globals()['inline_btn_%s' % code].text, callback_query.from_user.username if callback_query.from_user.username is not None else callback_query.from_user.id, datetime.now())
    if next_friday == today.date() and today.hour > 14 and today.minute > 3:
        next_friday += timedelta(7)
    next_week = str(next_friday)
    status = await want_to_coffee(user_id=callback_query.from_user.id, user_name=await user_info(callback_query.from_user), community=globals()['inline_btn_%s' % code].text, week=next_week)
    if status == 'already':
        await bot.answer_callback_query(callback_query.id)
        # await bot.send_message(callback_query.from_user.id, '–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—é—â—É—é –Ω–µ–¥–µ–ª—é –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ '+globals()['inline_btn_%s' % code].text)
        await bot.send_message(callback_query.from_user.id, '–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—é—â—É—é –Ω–µ–¥–µ–ª—é')
    else:
        await bot.answer_callback_query(callback_query.id)
        if today.weekday() == 4 and today.hour > 14 and today.minute > 3:
            await bot.send_message(callback_query.from_user.id, '–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ '+globals()['inline_btn_%s' % code].text)
            await bot.send_message(callback_query.from_user.id, '–ü–∞—Ä—É –ø—Ä–∏—à–ª—é –≤ —Å–ª–µ–¥—É—â—É—é –ø—è—Ç–Ω–∏—Ü—É, —Ç–∞–∫ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä –Ω–∞ –Ω–µ–¥–µ–ª—é')
        else:
            await bot.send_message(callback_query.from_user.id, '–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—é—â—É—é –Ω–µ–¥–µ–ª—é –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ '+globals()['inline_btn_%s' % code].text)
            await bot.send_message(callback_query.from_user.id, '–í –ø—è—Ç–Ω–∏—Ü—É –ø—Ä–∏—à–ª—é —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
    
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = int(''.join(filter(lambda i: i.isdigit(), callback_query.data)))
    # now = datetime.now()
    # next_monday = (now - timedelta(days = now.weekday()) + timedelta(days=7)).date()
    today = datetime.now()
    next_friday = (today + timedelta( (4-today.weekday()) % 7 )).date()
    print('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', globals()['inline_btn_%s_del' % code].text, callback_query.from_user.username if callback_query.from_user.username is not None else callback_query.from_user.id, datetime.now())
    if next_friday == today.date() and today.hour > 14 and today.minute > 5:
        next_friday += timedelta(7)
    next_week = str(next_friday)
    status = await week_collection.count_documents({'user_id': {'$eq': str(callback_query.from_user.id)}, 'community': {'$eq': str(globals()['inline_btn_%s_del' % code].text)}, 'week': {'$eq': str(next_week)}})
    if status != 0:
        await week_collection.delete_one({'user_id': {'$eq': str(callback_query.from_user.id)}, 'community': {'$eq': str(globals()['inline_btn_%s_del' % code].text)}, 'week': {'$eq': str(next_week)}})
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–•–æ—Ä–æ—à–æ, —É–±—Ä–∞–ª —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ '+globals()['inline_btn_%s_del' % code].text)
    else:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ù–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ '+globals()['inline_btn_%s_del' % code].text)

#reg_next_week
@dp.message_handler(commands=['reg_next_week'])
async def start(message: types.Message):
    print('reg_next_week', message.from_user.username if message.from_user.username is not None else message.from_user.id, datetime.now())
    await message.reply("–û–∫–∏, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", reply_markup=inline_kb1)

#cancel_next_week
@dp.message_handler(commands=['cancel_next_week'])
async def start(message: types.Message):
    print('cancel_next_week', message.from_user.username if message.from_user.username is not None else message.from_user.id, datetime.now())
    await message.reply("–í—ã–±–µ—Ä–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏, —è —É–±–µ—Ä—É —Ç–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", reply_markup=inline_kb1_del)

#delete_me
@dp.message_handler(commands=['delete_me'])
async def start(message: types.Message):
    print('delete_me', message.from_user.username if message.from_user.username is not None else message.from_user.id, datetime.now())
    await users_collection.delete_one({'user_id': {'$eq': str(message.from_user.id)}})
    status = await week_collection.count_documents({'user_id': {'$eq': str(message.from_user.id)}}) ### –¢–£–¢ –ù–ê–î–û –ü–†–ê–í–ò–¢–¨ –ü–†–ò –£–ß–ê–°–¢–ò–ò –í –ù–ï–°–ö–û–õ–¨–ö–ò–• –ö–û–ú–¨–Æ–ù–ò–¢–ò
    if status != 0:
        await week_collection.delete_one({'user_id': {'$eq': str(message.from_user.id)}})
    await bot.send_message(chat_id = int(message.from_user.id), text = "–•–æ—Ä–æ—à–æ, —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    await bot.send_message(chat_id = int(message.from_user.id), text = "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏ /reg_next_week")

#help
@dp.message_handler(commands=['help'])
async def start(message: types.Message):
    print('help', message.from_user.username if message.from_user.username is not None else message.from_user.id)
    await bot.send_message(message.chat.id, 'Random Coffee - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–Ω–µ–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞')
    await bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ –¥–µ–π—Ç–∏–Ω–≥, —Ç–∞–∫ —á—Ç–æ —Ç—É—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É')
    await bot.send_message(message.chat.id, '–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, –æ–±–∑–∞–≤–µ—Å—Ç–∏—Å—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º–∏')
    await bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥—ã: \n/reg_next_week - –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ\n/cancel_next_week - –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é \n/delete_me - —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    await bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, —Ç–æ –ø–∏—à–∏ @powerpuffluv123')

#help
@dp.message_handler(commands=['boltalka'])
async def start(message: types.Message):
    await boltalka()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@dp.message_handler(content_types=["text"])
async def handle_text(message: types.Message):
    print('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç ', message.from_user.username if message.from_user.username is not None else message.from_user.id, datetime.now(), message.text)
    today = str(datetime.now())
    username = await user_info(message.from_user)
    today_n = datetime.now()
    next_friday = (today_n + timedelta( (4-today_n.weekday()) % 7 )).date()
    await freetext_collection.insert_one({'date': today, 'user_id': str(message.from_user.id), 'user_name': username, 'text' : message.text})
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–∏—Å–∞–ª')
    if await week_collection.count_documents({'user_id': {'$eq': str(message.chat.id)}, 'week': {'$eq': str(next_friday)}}) == 0:
        await bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –∂–º–∏ /reg_next_week')

############# reminder ###########################
async def next_week_reg_reminder():
    users_list = []
    today = datetime.now()
    next_friday = (today + timedelta( (4-today.weekday()) % 7 )).date()
    async for docs in users_collection.find():
        if int(docs['user_id']) not in users_list and await week_collection.count_documents({'user_id': {'$eq': docs['user_id']}, 'week': str(next_friday)}) == 0:
            users_list.append(int(docs['user_id']))
    for user in users_list:
        try:
            await bot.send_message(chat_id = int(user), text = "–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ")
            await bot.send_message(chat_id = int(user), text = "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ /reg_next_week")
        except BotBlocked:
            await asyncio.sleep(1)

async def how_was_reminder():
    users_list = []
    today = datetime.now()
    prev_friday = str((today + timedelta( (4-today.weekday()) % 7 ) - timedelta(days=7)).date())
    async for docs in week_collection.find({'week':prev_friday}):
        if int(docs['user_id']) not in users_list:
            users_list.append(int(docs['user_id']))
    for user in users_list:
        try:
            await bot.send_message(chat_id = int(user), text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞?")
            await bot.send_message(chat_id = int(user), text = "–õ—é–±–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è")
        except BotBlocked:
            await asyncio.sleep(1)

async def boltalka():
    user_list = [463776237, 449869512]
    for user in user_list:
        try:
            await bot.send_message(chat_id = user, text = "–ü–æ–∫–∞ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤ –º–µ–Ω—è –∑–∞–ª–æ–∂–∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ")
            await bot.send_message(chat_id = user, text = "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ –±—É–¥—É—â–µ–º —è –Ω–∞—É—á—É—Å—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
        except BotBlocked:
            await asyncio.sleep(1)

async def next_week_cancel_reminder():
    users_list = []
    today = datetime.now().date()
    async for docs in week_collection.find({'week':str(today)}):
        if int(docs['user_id']) not in users_list:
            users_list.append(int(docs['user_id']))
    for user in users_list:
        try:
            await bot.send_message(chat_id = int(user), text = "–ü—Ä–∏–≤–µ—Ç–∏–∫! –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —è —Å–∫–∏–Ω—É —Ç–µ–±–µ —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")
            await bot.send_message(chat_id = int(user), text = "–ï—Å–ª–∏ —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏ \n/cancel_next_week")
        except BotBlocked:
            await asyncio.sleep(1)

async def scheduler():
    aioschedule.every().wednesday.at("14:00").do(next_week_reg_reminder)
    aioschedule.every().friday.at("14:00").do(next_week_cancel_reminder)
    aioschedule.every().friday.at("14:05").do(create_week_pairs)
    aioschedule.every().thursday.at("20:00").do(how_was_reminder)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(3)
############# reminder ###########################



async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)

# async def send_messange():
#     for user in [463776237]:
#         await bot.send_message(chat_id = int(user), text = "–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —É–∂–∏–Ω —Å–µ–≥–æ–¥–Ω—è")
#     print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# aioschedule.every().day.at("14:33").do(send_messange)

# while 1==1:
#     schedule.run_pending()
#     time.sleep(1)

# executor.start_polling(dp)

# @dp.message_handler()
# async def choose_your_dinner():
#     for user in [463776237]:
#         await bot.send_message(chat_id = int(user), text = "–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —É–∂–∏–Ω —Å–µ–≥–æ–¥–Ω—è")

# async def scheduler():
#     aioschedule.every().day.at("18:20").do(choose_your_dinner)
#     while True:
#         await aioschedule.run_pending()
#         await asyncio.sleep(1)
        
# async def on_startup(dp): 
#     asyncio.create_task(scheduler())


